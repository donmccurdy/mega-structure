// Copyright (c) 2016, Sebastien Sydney Robert Bigot
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// The views and conclusions contained in the software and documentation are those
// of the authors and should not be interpreted as representing official policies,
// either expressed or implied, of the FreeBSD Project.
{
    function extractOptional(optional, index) {
        return optional ? optional[index] : null;
    }
  
    function optionalList(value) {
        return value !== null ? value : [];
    }
    
    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index));
    }
  
    function extractList(list, index) {
      var result = new Array(list.length), i;

      for (i = 0; i < list.length; i++) {
        result[i] = list[i][index];
      }

      return result;
    }
}

Start = StatementSeq?

StatementSeq
    =  _? head:Statement tail:(_ Statement)*  _? {
        return buildList(head, tail, 1);
    }

Statement "statement"
    =  SetStatement / RuleInvoc / RuleDef

RuleDef "definition" 
    = RuleToken _ rule:RuleName attributes:(_ RuleAttributes)* _? "{" _? production:RuleInvocSeq? _? "}" {
    
        var weight = 1;
        var failover = null;
        var maxdepth = -1;
        
        var attributes = extractList(attributes, 1);
        for (var i = 0; i < attributes.length; ++i) {
            var attribute = attributes[i];
            switch (attribute.type) {
                case "md":
                    maxdepth = attribute.maxdepth;  
                    failover = attribute.failover;
                    break;
                case "weight":
                    weight = attribute.weight;
                    break;
            }
        }
    
        return {type: "def", rule, weight, failover, maxdepth, production: optionalList(production)}
    }
    
RuleInvocSeq "production"
    = head:RuleInvoc tail:(_ RuleInvoc)* {
        return buildList(head, tail, 1);
    }
    
RuleAttributes "attributes"
    =  MaxDepthAttribute / WeightAttribute

MaxDepthAttribute "maxdepth"
    = MaxDepthToken _ maxdepth:UnsignedIntegerLitteral failover:(_? Failover)? {
        return {type: "md", maxdepth, failover: extractOptional(failover, 1)};
    }

Failover "failover"
    = ">" _? rule:RuleName {
        return rule;
    }
    
WeightAttribute "weight modifier"
    = WeightToken _ weight:Float {
        return {type: "weight" , weight};
    }
    
RuleName "name"
    = !Reserved identifier:Identifier {
        return identifier
    }

RuleInvoc "invocation"
    = transformations:Transformation* _? next:Next {
        return {type: "invoc", transformations, next}
    }

Next = name:RuleName {
        return {type: "call", name}
    }
    / name:Shape {
        return {type: "shape", name}
    }

Transformation "transformation"
    = _? multiplier:Multiplier? "{" _? sequence:ElementaryTransformationSeq? _? "}" { 
        return {multiplier: multiplier ? multiplier : 1, sequence: optionalList(sequence)}; 
    }

Multiplier "multiplier"
    = multiplier:UnsignedIntegerLitteral _? "*" _? {
        return multiplier;
    }
    
ElementaryTransformationSeq  
    = head:ElementaryTransformation tail:(_ ElementaryTransformation)* {
        return buildList(head, tail, 1);
    }
    
ElementaryTransformation
    = Tx / Ty / Tz / Rx / Ry / Rz / Scale / Fx / Fy / Fz / Matrix / Hue / Sat / Bright / Alpha / SetColor / Blend
    
// 3D-space transforms

Tx "translate x"
    = TxToken _ dx:ArithExpression {
        return {type: "trans", t: [dx, 0, 0]}
    }
    
Ty "translate y"
    = TyToken _ dy:ArithExpression {
        return {type: "trans", t: [0, dy, 0]}
    }
    
Tz "translate z"
    = TzToken _ dz:ArithExpression {
        return {type: "trans", t: [0, 0, dz]}
    }
    
Rx "rotate x"
    = RxToken _ theta:ArithExpression {
        return {type: "rot", axis: 0, theta}
    }
    
Ry "rotate y"
    = RyToken _ theta:ArithExpression {
        return {type: "rot", axis: 1, theta}
    }
    
Rz "rotate z"
    = RzToken _ theta:ArithExpression {
        return {type: "rot", axis: 2, theta}
    }

Scale "scale"
    = ScaleToken _ x:ArithExpression yz:(_ ArithExpression _ ArithExpression)? {
        return {type: "scale", s: yz ? [x, yz[1], yz[3]] : [x, x, x]};
    }
    
Fx "flip x"
    = FxToken {
          return {type: "scale", s: [-1, 1, 1]};
    }

Fy "flip y"
    = FyToken {
        return {type: "scale", s: [1, -1, 1]};
    }
    
Fz "flip z"
    = FzToken {
        return {type: "scale", s: [1, 1, -1]};
    }

Matrix "matrix"
    = MatrixToken m:(_ ArithExpression)[9] {
        return {type: "matrix", m: extractList(m, 1)};
    }
    
// // TODO Colorspace transforms
Hue "hue"
    = HueToken _ hue:ArithExpression {
        return {type: "hue", h: hue};
    }   
   
Sat "saturation"
    = SatToken _ sat:ArithExpression {
        return {type: "sat", s: sat};
    }
        
Bright "brightness"
    = BrightnessToken _ brightness:ArithExpression {
        return {type: "brightness", v: brightness};
    }   
 
Alpha "alpha"
    = AlphaToken _ alpha:ArithExpression {
        return {type: "alpha", a: alpha};
    }
 
SetColor "set color"
    =  ColorToken _ color:Color {
        return color;
    }

Blend "blend"
    = BlendToken _ a:ArithExpression _ b:ArithExpression {
        return {blend: [a, b]}
    }

// TODO
// set color random
// set colorpool [scheme]

Shape "shape"
    = "box" / "grid" / "sphere" / "line" / "point" / "triangle" / "mesh" / "cylinder" / "tube"

SetStatement "set statement"
    = SetToken _ what:(Maxdepth / MaxObjects / Minsize / Naxsize / Seed / Background / Raytracer) {
        return {type: "set", val: what}
    }

Maxdepth "maxdepth"
    = MaxDepthToken _ Integer
    
MaxObjects "maxobjects"
    = MaxObjectsToken _ Integer

Minsize "minsize"
    = MinSizeToken _ Float

Naxsize "maxsize"
    =  MaxSizeToken _ Float
    
Seed "seed"
    = SeedToken _ (Integer / "initial")

Background "background"
    = BackgroundToken _ Color

// For structure-synth compat
Raytracer "raytracer"
    = RaytracerToken (!LineTerminator SourceCharacter)*

DecimalDigit
    = [0-9]

NonZeroDigit
    = [1-9]

HexDigit "hex digit"
    = d:[0-9a-f]i
    
Character "character"
    = [a-z]i

UnsignedIntegerLitteral
    = UnsignedInteger {
        return parseInt(text());
    }
    
UnsignedInteger "integer"
    = "0" / NonZeroDigit DecimalDigit*
    
Integer
    = [+-]? UnsignedInteger

ExponentPart
    = ExponentIndicator Integer

ExponentIndicator
    = "e"i
  
// Litterals
Float "float"
    = (Integer "." DecimalDigit* ExponentPart? / "." DecimalDigit+ ExponentPart? / Integer ExponentPart?) {
       return parseFloat(text());
    }


Color "color"
    = "#" HexDigit HexDigit HexDigit (HexDigit HexDigit HexDigit)? {
        return {type: "color", val: text() }
    }
    / ColorName {
        return {type: "color", val: text() }
    }
    
ColorName = "white" / "black" / "red" / "green" / "blue" / "grey"

// Simple arithmetic
ArithExpression "arithmetic expression"
  = head:ArithTerm tail:(_? ("+" / "-") _? ArithTerm)* {
      var result = head, i;

      for (i = 0; i < tail.length; i++) {
        if (tail[i][1] === "+") { result += tail[i][3]; }
        if (tail[i][1] === "-") { result -= tail[i][3]; }
      }

      return result;
    }

ArithTerm
  = head:ArithFactor tail:(_? ("*" / "/") _? ArithFactor)* {
      var result = head, i;

      for (i = 0; i < tail.length; i++) {
        if (tail[i][1] === "*") { result *= tail[i][3]; }
        if (tail[i][1] === "/") { result /= tail[i][3]; }
      }

      return result;
    }

ArithFactor
  = "(" _? expr:ArithExpression _? ")" { return expr; }
  / Float    
    
Identifier "identifier"
    = head:IdentifierStart tail:IdentifierPart* { return head + tail.join("") }

IdentifierStart
    = "_" / Character

IdentifierPart
    = IdentifierStart / DecimalDigit

SourceCharacter = .

WhiteSpace "whitespace" = "\t" / "\v" / "\f" / " "

LineTerminator = [\n\r]

LineTerminatorSequence "end of line" = "\n" / "\r\n" / "\r"

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)*
_
  = (WhiteSpace / LineTerminatorSequence / Comment)+
  
SetToken = "set" !IdentifierPart
RuleToken = "rule" !IdentifierPart
MaxDepthToken = "md" !IdentifierPart / "maxdepth" !IdentifierPart
WeightToken = "w" !IdentifierPart / "weight" !IdentifierPart
MaxObjectsToken = "maxobjects" !IdentifierPart
MinSizeToken = "minsize" !IdentifierPart
MaxSizeToken = "maxsize" !IdentifierPart
SeedToken = "seed" !IdentifierPart
BackgroundToken = "background" !IdentifierPart
HueToken =  "h" !IdentifierPart / "hue" !IdentifierPart 
SatToken = "sat" !IdentifierPart
BrightnessToken = "b" !IdentifierPart / "brightness" !IdentifierPart
AlphaToken = "a" !IdentifierPart / "alpha" !IdentifierPart
ColorToken = "color" !IdentifierPart
BlendToken = "blend" !IdentifierPart
InitialToken = "initial" !IdentifierPart
TxToken = "x" !IdentifierPart
TyToken = "y" !IdentifierPart
TzToken = "z" !IdentifierPart
RxToken = "rx" !IdentifierPart
RyToken = "ry" !IdentifierPart
RzToken = "rz" !IdentifierPart
ScaleToken = "s" !IdentifierPart
FxToken = "fx" !IdentifierPart
FyToken = "fy" !IdentifierPart
FzToken = "fz" !IdentifierPart
MatrixToken = "m" !IdentifierPart
RaytracerToken = "raytracer" !IdentifierPart

Reserved "reserved"
    = SetToken
    / RuleToken
    / MaxDepthToken
    / WeightToken
    / MaxObjectsToken
    / MinSizeToken
    / MaxSizeToken
    / SeedToken
    / BackgroundToken
    / HueToken
    / SatToken
    / BrightnessToken
    / AlphaToken
    / ColorToken
    / BlendToken
    / InitialToken
    / TxToken
    / TyToken
    / TzToken
    / RxToken
    / RyToken
    / RzToken
    / ScaleToken
    / FxToken
    / FyToken
    / FzToken
    / MatrixToken
    / RaytracerToken
    / Shape !IdentifierPart
    / ColorName !IdentifierPart
